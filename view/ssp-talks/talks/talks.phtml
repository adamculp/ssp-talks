<div class="page-header">
    <h1>Talks</h1>
</div>
<div id="block-mine">
    <p style="text-align: justify;">
        Below is a full listing of 50 minute talks to be presented at SunshinePHP. Our selection committee did a wonderful job of selecting a nice variety of talk topics, and the best speakers.  We hope there is something for everyone developing with PHP.<br /><br />
    
        NOTE: Attending these 50 minute talks on Friday and Saturday February 6th and 7th requires the purchase of a normal conference ticket on the <a href="http://sunshinephp.com/register" title="Speaker: SunshinePHP Registration">Registration page</a>.
    </p>
    
    <div style="padding-left: 30px;">
        <div id="advanced-adventures-in-git" style="text-align: justify;">
            <hr />
        
            <h2>Advanced Adventures In Git</h2>
        
            <a href="/speakers#lorna-mitchell" title="Speaker: Lorna Mitchell">Lorna Mitchell</a><br /><br />
    
            Boost your git skills in this session where we pick out some of the most handy but underused features of an excellent tool. If you're confident committing, branching and merging, then come along and collect the next set of skills, to include bisect, rebasing, adding patches rather than files, the rerere command, and some tricks for handling multiple remotes. We'll also look at using configuration files: your own config, the gitignore file and how to teach gitattributes about the different types of file in your project. Anyone using git on a regular basis will learn some new tricks in this session.<br /><br />
        
        </div>
    
        <div id="beyond-design-patterns" style="text-align: justify;">
            <hr />
        
            <h2>Beyond Design Patterns</h2>
        
            <a href="/speakers#anthony-ferrara" title="Speaker: Anthony Ferrara">Anthony Ferrara</a><br /><br />
    
            Many people teach design patterns as a fundamental step to Object Oriented Programming. They are so universally seen as important that almost every single programming conference that I have been to has had at least one talk about them. They are quite often used as interview questions to test a candidate's OOP knowledge. However, just like inheritance, they are not needed for OOP. And just like inheritance, they are a distraction rather than a foundation. Instead of focusing on patterns, I suggest focusing on learning about abstraction and communication. Why? Come and find out!<br /><br />
    
        </div>
    
        <div id="beyond-php-its-not-just-about-the-code" style="text-align: justify;">
            <hr />
        
            <h2>Beyond PHP: It's Not (just) About The Code!</h2>
        
            <a href="/speakers#wim-godden" title="Speaker: Wim Godden">Wim Godden</a><br /><br />
    
            Most PHP developers focus on writing code. But creating Web applications is about much more than just writing PHP. Take a step outside the PHP cocoon and into the big PHP ecosphere to find out how small code changes can make a world of difference on servers and network. This talk is an eye-opener for developers who spend over 80% of their time coding, debugging and testing.<br /><br />
    
        </div>
    
        <div id="cmsmadesimple-simple-for-you-simple-for-your-customers" style="text-align: justify;">
            <hr />
        
            <h2>CMSMadeSimple: Simple For You, Simple For Your Customers</h2>
        
            <a href="/speakers#beth-tucker-long" title="Speaker: Beth Tucker Long">Beth Tucker Long</a><br /><br />
    
            Tired of trying to convert HTML/CSS files into a theme for WordPress? Frustrated with teaching non-technical users to use the Drupal admin panel? CMSMadeSimple is quick to install, very easy to theme, and a breeze for non-technical users to manage with their clean, easy-to-learn admin panel. You can write blocks of custom PHP code that are run using Smarty-like tags, so your users can add code to their pages without ever seeing the PHP (or breaking it). Add to this, a library of modules that are installed with the click of a button in the admin panel, and CMSMadeSimple is a clear winner! Learn how to install, theme, and expand CMSMadeSimple, going from "nothing" to "ready to deliver" in the span of this single talk.<br /><br />
    
        </div>
    
        <div id="composer-the-right-way" style="text-align: justify;">
            <hr />
        
            <h2>Composer The Right Way</h2>
        
            <a href="/speakers#rafael-dohms" title="Speaker: Rafael Dohms">Rafael Dohms</a><br /><br />
    
            Composer has triggered a renaissance in the PHP community, it has changed the way we deal with other people’s code and it has changed the way we share our code. We are all slowly moving to using Composer, from Wordpress to Joomla and Drupal and frameworks in between. But many of us mistreat composer, follow outdated practices or simply lack a few tricks. In this session i’ll get you the low down on how to use composer the right way.<br /><br />
    
        </div>
    
        <div id="debugging-zen" style="text-align: justify;">
            <hr />
        
            <h2>Debugging Zen</h2>
        
            <a href="/speakers#ben-ramsey" title="Speaker: Ben Ramsey">Ben Ramsey</a><br /><br />
    
            Debugging is a skill that we have a hard time exercising and is one of the most difficult to teach. It is a scientific discipline and an art. It requires you to reach beyond analytical thinking to rely upon your own intuition. In this talk, we’ll examine how intuition plays a role in debugging software. We'll explore practical pointers on tapping into intuition and combining it with analytical processes to be a better developer.<br /><br />
    
        </div>
    
        <div id="developer-experience-in-the-php-world" style="text-align: justify;">
            <hr />
        
            <h2>Developer Experience In The PHP World</h2>
        
            <a href="/speakers#ryan-weaver" title="Speaker: Ryan Weaver">Ryan Weaver</a><br /><br />
    
            We're sharing more, we're writing more blog posts and we're building libraries with increasingly clever names. So why does it sometimes *still* feel like rage-tossing my computer out of the window is part of solving development problems? I thought the future would let me composer install unicorns and rainbows directly into my app!? Shouldn't my experience as a developer be smoother? Having *only* great tools is just about as useful as locking me inside a Home Depot and asking me to build a house. So in this talk, we'll look at developer experience (DX) in the PHP world by going through some DX wins and some DX fails, um, "todos". I'll also share what some communities and libraries are doing specifically to make our lives easier and more productive. But ultimately, DX starts with *us*: developers who notice when things are too difficult and improve them. By the end of this talk, I hope the PHP world will have a few more DX heroes.<br /><br />
    
        </div>
    
        <div id="dockerize-all-the-things" style="text-align: justify;">
            <hr />
        
            <h2>Dockerize All The Things!</h2>
        
            <a href="/speakers#chris-tankersley" title="Speaker: Chris Tankersley">Chris Tankersley</a><br /><br />
    
            Thanks to tools like vagrant, puppet/chef, and Platform as a Service services like Heroku, developers are extremely used to being able to spin up a development environment that is the same every time. What if we could go a step further and make sure our development environment is not only using the same software, but 100% configured and set up like production. Docker will let us do that, and so much more. We'll look at what Docker is, why you should look into using it, and all of the features that developers can take advantage of.<br /><br />
    
        </div>
    
        <div id="drupal-8-the-crash-course" style="text-align: justify;">
            <hr />
        
            <h2>Drupal 8: The Crash Course</h2>
        
            <a href="/speakers#larry-garfield" title="Speaker: Larry Garfield">Larry Garfield</a><br /><br />
    
            One of the most widely-used and mature Content Management Systems on the planet, Drupal runs more than one in fifty websites in the world. However, it has always been something of an odd duck, with an architecture and design very different than anything else in PHP. Enter Drupal 8: Almost a complete rewrite under the hood, Drupal 8 is a modern, PHP 5.4-boasting, REST-capable, object-oriented powerhouse. Now leveraging 3rd party components from no less than 9 different projects, Drupal 8 aims to be the premiere Content Management Platform for PHP. But how do you use all this new-fangled stuff? This session will provide a walkthrough of Drupal's key systems and APIs, intended to give developers a taste of what building with Drupal 8 will be like. Prior familiarity with Drupal 7 is helpful but will not be assumed.<br /><br />
    
        </div>
    
        <div id="giving-up-control-inversion-of-control-for-beginners" style="text-align: justify;">
            <hr />
        
            <h2>Giving Up Control: Inversion Of Control For Beginners</h2>
        
            <a href="/speakers#matthew-weier-ophinney" title="Speaker: Matthew Weier O'Phinney">Matthew Weier O'Phinney</a><br /><br />
    
            Over the past few years, the mantra in OOP PHP projects has been "Dependency Injection": get rid of those registries, service locators, and God objects. Simply put, Dependency Injection (DI) is the act of injecting objects on which a class depends via the constructor or setter methods, instead of instantiating them directly or pulling them from a known location (usually a registry). The real question, however, is: where do you create those dependency instances? This is where a concept called "Inversion of Control" (IoC) comes into play. During this session, we'll review Dependency Injection, define Inversion of Control, and look at methods of implementing IoC. Generic examples will illustrate how IoC can make it possible to automate DI, as well as provide the ability to substitute alternate implementations for dependencies when desired - thus adding flexibility to application design.<br /><br />
    
        </div>
    
        <div id="handling-highly-connected-data-with-the-neo4j-graph-database" style="text-align: justify;">
            <hr />
        
            <h2>Handling Highly Connected Data With The Neo4j Graph Database</h2>
        
            <a href="/speakers#michelle-sanver" title="Speaker: Michelle Sanver">Michelle Sanver</a><br /><br />
    
            Traditional relational databases — ironically — are not that good at the complex relationships some modern applications need. Multiple joins and complex sub-queries can gradually take a toll on performance. Graph Databases, on the other hand, are all about relationships. In this talk we will look at using the popular Neo4j graph database with PHP to build efficient relational data for OmNomHub: not your average recipe site.<br /><br />
    
        </div>
    
        <div id="hhvm-basics" style="text-align: justify;">
            <hr />
        
            <h2>HHVM Basics</h2>
        
            <a href="/speakers#sara-golemon" title="Speaker: Sara Golemon">Sara Golemon</a><br /><br />
    
            What is HHVM? Why does it matter to the average (or above average) PHP site? What benefits does switching to HHVM offer? These questions and more will be answered in one information packed hour.<br /><br />
    
        </div>
    
        <div id="introduction-to-continuous-integration-with-jenkins" style="text-align: justify;">
            <hr />
        
            <h2>Introduction To Continuous Integration With Jenkins</h2>
        
            <a href="/speakers#eric-hogue" title="Speaker: Eric Hogue">Eric Hogue</a><br /><br />
    
            Continuous Integration allows developers to run tests automatically every time code is pushed to source control. We will look at the different tests that a Continuous Integration server can run. How to create a build script so it runs the tests and make sure it produces the needed reports. Finally, how to set up Jenkins to run the build and display the reports.<br /><br />
    
        </div>
    
        <div id="machine-learning-or-how-to-build-skynet-on-your-lunch-break" style="text-align: justify;">
            <hr />
        
            <h2>Machine Learning: Or How To Build SkyNet On Your Lunch Break</h2>
        
            <a href="/speakers#kayla-daniels" title="Speaker: Kayla Daniels">Kayla Daniels</a><br /><br />
    
            In this talk we'll learn about the wonderful world of Machine Learning and how we can bend it to our will to tackle common problems that we face in our applications. We'll start with a quick primer on what even is Machine Learning. We'll learn about its different types, and the situations that suit them. We'll cover some history, and be introduced to the Grandfather of all Hipsters, Carl Friedrich Gauss. Once we know what it is, and where it came from, we can look at the kinds of problems that it can be used to solve and the tools available to help us use machine learning to conquer the world.<br /><br />
    
        </div>
    
        <div id="maximising-performance-in-zf2" style="text-align: justify;">
            <hr />
        
            <h2>Maximising Performance in ZF2</h2>
        
            <a href="/speakers#gary-hockin" title="Speaker: Gary Hockin">Gary Hockin</a><br /><br />
    
            Zend Framework 2 is a complex beast, and has been wrongly criticised for it's performance in a number of places. There are plenty of ways to eek out extra cycles from Zend Framework 2, some of them are known, some, not so much. Fisrtly you'll be introduced to the ways to benchmark and profile your ZF2 app, then we'll discuss the out-of-the-box improvements such as config caching and compiling, but also cover some bespoke modules designed to help your performance. Finally, we'll cover some coding best practices that can really help to squeeze that little extra out of your entry level VM.<br /><br />
    
        </div>
    
        <div id="queues-and-the-giant-beanstalkd" style="text-align: justify;">
            <hr />
        
            <h2>Queues And The Giant Beanstalkd</h2>
        
            <a href="/speakers#daniel-cousineau" title="Speaker: Daniel Cousineau">Daniel Cousineau</a><br /><br />
    
            In the modern world of scaling web applications, queues have become a go-to for increasing performance by parallelizing and backgrounding heavy duty tasks. Learn practical usages of queues through beanstalkd.<br /><br />
    
        </div>
    
        <div id="rest-api-best-practices" style="text-align: justify;">
            <hr />
        
            <h2>REST API Best Practices</h2>
        
            <a href="/speakers#mike-stowe" title="Speaker: Mike Stowe">Mike Stowe</a><br /><br />
    
            Let's talk best practices, but more importantly, the ones most people tend NOT to follow. You know, things like doing CRUD correctly, using the correct response codes, or how about that whole hypermedia thing. We'll even take a look at different API specs and data response formats (you know like HAL, JSON-LD, JSON API, etc) before taking a few minutes to answer any specific questions you might have.<br /><br />
    
        </div>
    
        <div id="secure-form-processing-and-protection" style="text-align: justify;">
            <hr />
        
            <h2>Secure Form Processing And Protection</h2>
        
            <a href="/speakers#joe-ferguson" title="Speaker: Joe Ferguson">Joe Ferguson</a><br /><br />
    
            XSS, NONCE, CSRF, WTF?! Form processing is something that's very basic and easy to do...wrong. There are tools and technologies you need to be using to prevent your forms from being abused and data falling into the wrong hands. We'll explore several of these technologies and how to implement them into your applications to keep your data safe.<br /><br />
    
        </div>

        <div id="speak-http-and-consume-apis-with-guzzle" style="text-align: justify;">
            <hr />
    
            <h2>Speak HTTP And Consume APIs With Guzzle</h2>
    
            <a href="/speakers#jeremy-lindblom" title="Speaker: Jeremy Lindblom">Jeremy Lindblom</a><br /><br />
    
            Guzzle is a HTTP client library in PHP that puts all the power of cURL at your fingertips, but with a simple and intuitive interface. Learn how to use Guzzle to work with HTTP and web service APIs, and see how Guzzle's simple HTTP abstractions, flexible event system, and asynchronous request capabilities make Guzzle an amazing open source project that should be a permanent part of your PHP tool belt.<br /><br />

        </div>
    
        <div id="symfony2-the-very-basics" style="text-align: justify;">
            <hr />
        
            <h2>Symfony2 - The Very Basics</h2>
        
            <a href="/speakers#margaret-staples" title="Speaker: Margaret Staples">Margaret Staples</a><br /><br />
    
            The unknown learning curve for adopting a framework can put the benefits they offer logistically out of reach for developers with an eye on a deadline. This talk will aim to provide all of the basic knowledge needed to develop a new web project using the Symfony2 framework. The talk will cover initial setup, navigating the directory structure, the routing-&gt;controller-&gt;template relationship, setting up your first pages, adding bundles, as well as a brief introduction to creating services and commands. Prior knowledge of other frameworks is not assumed, and the talk aims to be sufficiently straightforward for developers of any experience level.<br /><br />
    
        </div>

        <div id="tdd-team-driven-development" style="text-align: justify;">
            <hr />
    
            <h2>TDD: Team-Driven Development</h2>
    
            <a href="/speakers#samantha-quinones" title="Speaker: Samantha Quiñones">Samantha Quiñones</a><br /><br />
    
            Developing software as part of a team introduces a host of challenges. A strong, motivated development team working together can marshal the strengths and specialities of each of its members to create something much larger than the sum of its parts. Teams that don’t work together can drain resources and make the workplace a miserable place to spend the day. The fact is, strong teams need strong leaders, and strong leadership is something that each of us can cultivate within ourselves. No matter your experience level or seniority, if you work as part of a team, you have the capacity to help lead your colleagues toward success. We’ll discuss strategies for dealing with conflict, ideas on how to become stronger communicators, and ways to help you and your teammates get the best from one another.<br /><br />

        </div>

        <div id="the-big-why-equal-doesnt-equal-quiz" style="text-align: justify;">
            <hr />
    
            <h2>The Big "Why Equal Doesn't Equal" Quiz</h2>
    
            <a href="/speakers#juliette-reinders-folmer" title="Speaker: Juliette Reinders Folmer">Juliette Reinders Folmer</a><br /><br />
    
            So you think you know PHP? But do you really? We all compare data on nearly every other line in our code, be it input validation, an if-statement, a switch or determining what to display and how. So of course we are all experts on how to do these comparisons.... Or are we? Come and join in on the Big "Why equal doesn't equal" Quiz and show us whether you are an expert or a n00b in disguise...!<br /><br />

        </div>

        <div id="the-javascript-single-page-app-front-end-and-the-php-back-end" style="text-align: justify;">
            <hr />
    
            <h2>The Javascript Single Page App Front-end And The PHP Back-end</h2>
    
            <a href="/speakers#ralph-schindler" title="Speaker: Ralph Schindler">Ralph Schindler</a><br /><br />
    
            Once upon a time, a PHP developer architected applications that both interacted with the data-store and also delivered HTML and other assets to the browser. Today, it is increasingly so the traditional PHP full stack application is no longer the piece delivering the HTML and other assets, but "merely" delivering data encapsulated as JSON. What used to be a single monolithic PHP application for many has evolved into a thin PHP API serving back-end, and a rich Single Page Application (as consumer #1 of the backend) built in JavaScript on the front-end. Along the way of this evolution, well wrangled problems and concepts like MVC, authentication, and UI/UX problems have also been redefined and reassigned to either the back-end app, front-end app, or both. In this talk, we'll attempt to bring clarity to the roles and responsibilities of the front-end application and the back-end application given a solid understanding of a traditional full stack server application.<br /><br />

        </div>

        <div id="the-twelve-factor-app-best-practices-for-php-on-platform-as-a-service" style="text-align: justify;">
            <hr />
    
            <h2>The Twelve-Factor App: Best Practices For PHP On Platforms-As-A-Service</h2>
    
            <a href="/speakers#david-zuelke" title="Speaker: David Zuelke">David Zuelke</a><br /><br />
    
            Horizontal scalability has always been at the core of PHP application design, and in the cloud, that approach shines the brightest. But to fully leverage the power and convenience of PaaS offerings such as Heroku, it's worth following certain best practices and methodologies when developing applications. This presentation covers all the steps from code and dependency management over configuration to maintaining dev/prod environment parity, and will demonstrate just how easy it can be to deploy and scale a PHP application on Heroku.<br /><br />

        </div>

        <div id="tuning-nginx-and-php-fpm-the-right-way" style="text-align: justify;">
            <hr />
    
            <h2>Tuning Nginx And PHP-FPM The Right Way</h2>
    
            <a href="/speakers#evan-coury" title="Speaker: Evan Coury">Evan Coury</a><br /><br />
    
            More and more large companies and websites are switching over to Nginx + PHP-FPM for increased performance and more efficient resource utilization. When properly tuned, this duo can be a perfect match for high traffic situations. However, it only takes one small oversight in the configuration to bring your site to a grinding halt under high load. Join Evan Coury, owner of Roave, as he shares all of his tips and tricks learned throughout years of high scalability consulting and running several extremely high traffic websites. We’ll cover how to optimally tune PHP-FPM worker pools, sysctl, and Nginx to get the most out of your servers. Additionally, we’ll cover adding additional capacity to handle traffic spikes, load balancing, and more.<br /><br />

        </div>

        <div id="unit-testing-php-applications" style="text-align: justify;">
            <hr />
    
            <h2>Unit Testing PHP Applications</h2>
    
            <a href="/speakers#michael-moussa" title="Speaker: Michael Moussa">Michael Moussa</a><br /><br />
    
            Testing your code before deploying to Production is important - so why rely on slow, limited, manual testing? Automated tests can help protect you from introducing bugs into your applications and provide valuable feedback on application design. They're quick, they run whenever you want them to, and they don't forget about those few lines of code you wrote months ago. In this talk, you'll learn how to set up PHPUnit and configure it to run tests against your project. We'll write some tests together and go over more intermediate topics, such as mocking dependencies and making your code more "testable." Finally, we'll see which tools are available for us to help determine how much of our code is tested and to assess its overall quality. After this talk, you'll know everything you need to begin testing your PHP applications.<br /><br />

        </div>

        <div id="vagrant-provisioning-with-ansible" style="text-align: justify;">
            <hr />
    
            <h2>Vagrant Provisioning With Ansible</h2>
    
            <a href="/speakers#erika-heidi" title="Speaker: Erika Heidi">Erika Heidi</a><br /><br />
    
            Vagrant is getting more and more popular every day, reaching the status of de-facto tool for virtualized environments created for development purposes - you can finally forget about setting the right environment and focus on what you do best: code. However, many developers still step back from this great tool after having a bad experience with tools like Puppet and Chef. This talk will present you Ansible, a clean and straightforward automation tool that can be used along with Vagrant to spin up development vms. You you will learn how to get started with Ansible and write your first playbooks to provision a Vagrant environment.<br /><br />

        </div>

        <div id="wrangle-cross-cutting-concerns-with-event-driven-programming" style="text-align: justify;">
            <hr />
    
            <h2>Wrangle Cross-Cutting Concerns With Event Driven Programming</h2>
    
            <a href="/speakers#chris-saylor" title="Speaker: Chris Saylor">Chris Saylor</a><br /><br />
    
            Event driven programming is becoming essential to many applications and frameworks that can be utilized to make your application more flexible and “plugin” ready. Learn how to effectively use events in applications to reduce code complexity of cross-cutting concerns, how various frameworks implement events and make them available to the developer, and the benefits and drawbacks of utilizing aspect oriented development with real world examples. We will also look at many popular frameworks (Symfony2, CakePHP, Zend, etc) to see how their event architecture is implemented at a bird’s-eye view and how developers can take advantage, including a demo using Symfony2’s dispatcher to illustrate the benefits of event driven design.<br /><br />

        </div>

        <div id="your-api-is-bad-and-you-should-feel-bad" style="text-align: justify;">
            <hr />
    
            <h2>Your API Is Bad And You Should Feel Bad</h2>
    
            <a href="/speakers#ben-edmunds" title="Speaker: Ben Edmunds">Ben Edmunds</a><br /><br />
    
            Do you hate the Facebook API? We all do as well. So stop writing your API in their footsteps. In this talk we will walk through how to construct a RESTful API, what makes an API your users/developers will love, and why you should eat your own dog food with API Driven Development.<br /><br />

        </div>

        <div id="your-code-are-my-tests" style="text-align: justify;">
            <hr />
    
            <h2>Your Code Are My Tests!</h2>
    
            <a href="/speakers#michelangelo-van-dam" title="Speaker: Michelangelo Van Dam">Michelangelo Van Dam</a><br /><br />
    
            After years of promoting PHPUnit I still hear it's hard to get started with unit testing. So instead of showing nice step-by-step examples on how to use PHPUnit, we're going to take an example straight from github. So I've taken the challenge to start writing tests for PHP projects that don't have unit tests in place and explain how I decide where to begin, how I approach my test strategy and how I ensure I’m covering each possible use-case (and covering the CRAP index). The goal of this presentation is to show everyone that even legacy code, spaghetti code and complex code bases can be tested. After this talk you can immediately apply my examples on your own codebase (even if it's a clean code base) and get started with testing. To follow along a basic knowledge unit testing with PHPUnit is required.<br /><br />

        </div>

        <hr />
    </div>
</div>
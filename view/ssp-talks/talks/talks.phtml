<div class="page-header">
    <h1>Talks</h1>
</div>
<div id="block-mine">
<p style="text-align: justify;">
    Below is a full listing of 50 minute talks to be presented at SunshinePHP. Our selection committee did a wonderful job of selecting a nice variety of talk topics, and the best speakers.  We hope there is something for everyone developing with PHP.<br /><br />

    NOTE: Attending these 50 minute talks on Friday and Saturday February 7th and 8th, 2014 requires the purchase of a normal conference ticket on the <a href="http://sunshinephp.com/register" title="Speaker: SunshinePHP Registration">Registration page</a>.
</p>

<div style="padding-left: 30px;">
<div id="application-logic-security">
    <hr />

    <h2>Application Logic Security</h2>

    <a href="/speakers#ilia-alshanetsky" title="Speaker: Ilia Alshanetsky">Ilia Alshanetsky</a><br /><br />

    This session will outline security practices and solutions designed to address security issues within application's business and processing logic, which are often overlooked in favour of basic security flaws such as SQL Injection, XSS, etc... The session will focus on how to implement mechanisms for improving data access, avoiding common ACL pitfalls, etc.<br /><br />

</div>
<div id="sticks-spit-and-duct-tape-advanced-responsive-layout-techniques">
    <hr />

    <h2>Sticks, Spit, and Duct Tape: Advanced Responsive Layout Techniques</h2>

    <a href="/speakers#josh-broton" title="Speaker: Josh Broton">Josh Broton</a><br /><br />

    You've made the decision. You're taking the plunge. It's responsive or bust. But what happens after the first bit of HTML and CSS is on the page? What if plan A doesn't work? HTML/CSS can be a fickle lover, so it's important to know 2 (or even 3) ways to accomplish the task at hand. This hour will be a quick overview of the history of responsive web design, as well as uncovering a plan B, C, and maybe D for your responsive layout.<br /><br />

</div>
<div id="clean-code-refactoring">
    <hr />

    <h2>Clean Code: Refactoring</h2>

    <a href="/speakers#jeff-carouth" title="Speaker: Jeff Carouth">Jeff Carouth</a><br /><br />

    There are very few "write once" applications in reality. As developers we must keep up with constant changes and evolution of problems and our code should reflect this. In this talk we will look at practical examples of code that is not "bad" code but needs a little attention. We will look at techniques for refactoring it to a more readable, understandable, and maintainable state. <br /><br />

</div>
<div id="redis-everywhere">
    <hr />

    <h2>Redis Everywhere</h2>

    <a href="/speakers#ricard-clau" title="Speaker: Ricard Clau">Ricard Clau</a><br /><br />

    Redis is an extremely fast data structure server that can be easily added to your existing stack and act like a Swiss army knife to help solve many problems that would be extremely difficult to workaround with the traditional RDBMS. This talk will cover an introduction to Redis, how we can use it in our PHP applications and some advanced use cases beyond the most known ones, which are probably Caching and Session Management. There will also be some war stories from my time at SocialPoint, a video gaming company based in Barcelona where Redis is used extensively for projects like DragonCity that has to deal with more than 7 million daily users. I had the oportunity to give a shorter version of this talk at PHP London in August 2013. Since the time was more limited there I had to skip some topics that will be added this time if the talk gets accepted.<br /><br />

</div>
<div id="introduction-to-zend-framework-2">
    <hr />

    <h2>Introduction to Zend Framework 2</h2>

    <a href="/speakers#john-coggeshall" title="Speaker: John Coggeshall">John Coggeshall</a><br /><br />

    Zend Framework has become a standard in the PHP world for web application development and it's successor, Zend Framework 2 is even more powerful. However, there have been many changes architecturally to the new framework that even those who are familiar with ZF1 will find hard to understand initially. In this talk we will explore the fundamental concepts of ZF2, both architecture and intent as we build ourselves a simple application.<br /><br />

</div>
<div id="writing-maintainable-zf2-applications">
    <hr />

    <h2>Writing Maintainable ZF2 Applications</h2>

    <a href="/speakers#evan-coury" title="Speaker: Evan Coury">Evan Coury</a><br /><br />

    Zend Framework 2 provides a lot of great tools and resources to help developers build quality applications. However, a lot of important architectural decisions are still left to the developer. What belongs in the controllers? Whatâ€™s a service layer and why should you have one? What the %*$# is a model, really? In this session, Evan will lift the fog on all of these concepts, showing you how to use them to create a more maintainable and well architectured ZF2 application, while keeping the technical debt to a minimum.<br /><br />

</div>
<div id="development-by-the-numbers">
    <hr />

    <h2>Development, By The Numbers</h2>

    <a href="/speakers#anthony-ferrara" title="Speaker: Anthony Ferrara">Anthony Ferrara</a><br /><br />

    Quite often we hear people talking about how to write better code, how to build systems better or how to leverage new technologies to produce better software. But how can we objectively quantify whether code is good or if it needs improving? How can we analyze an existing codebase to see what parts need improvement without spending weeks reading through the source code? The answer is provided by static analysis tools like pDepend and PHPLOC. But the results that they produce can be extremely cryptic and hard to understand. From acronyms like NPATH and CRAP to metrics like Cyclomatic Complexity and Fanout, there's a whole treasure trove of information just waiting to be descifered. In this talk, we'll explore some of the tools available for measuring software quality. We'll dive into some of the theory behind the metrics that they analyze while looking at some real world applications of those metrics. We'll also explore how to use these tools to gain valuable insight into legacy codebases. Finally, we'll look into methods to integrate those metrics into your development workflow to help improve the quality of the applications that you build.<br /><br />

</div>
<div id="vagrant-puppet-and-chef-ftw">
    <hr />

    <h2>Vagrant, Puppet and Chef FTW</h2>

    <a href="/speakers#thijs-feryn" title="Speaker: Thijs Feryn">Thijs Feryn</a><br /><br />

    Everyone has used the term "but, it works on my machine ..." before and it usually resulted in disaster. Managing your local development environment has always been tricky, especially when you want it to be an exact copy of your production environment. Vagrant tries to solve this problem by offering simple tool for managing lightweight, portable and reproducible development environments. Vagrant is a tool for both individual developers and development teams. This talk will cover the basics of Vagrant and will also cover a brief introduction of configuration management tools like Puppet and Chef to provision your machines. "vagrant up" will be a command you'll learn to love. The target audience for this talk is developers looking for an easy way to manage their development environment and sharing it with team members.<br /><br />

    The main objectives this talk are:<br />
    * Hassle-free setup of your development environment<br />
    * Having a portable definition of your environment<br />
    * Improving collaboration<br />
    * Tearing down the walls between developers and sysadmins<br />
    * Avoiding dependency clashes between different projects<br />
    * Stepping away from one monolithic development environment<br />
    * Having a replica of production to develop on<br />
    * Boosting confidence that your code will work once it is deployed<br />
    * Moving one step closer to continuous delivery<br /><br />

</div>
<div id="building-testable-php-applications">
    <hr />

    <h2>Building Testable PHP Applications</h2>

    <a href="/speakers#chris-hartjes" title="Speaker: Chris Hartjes">Chris Hartjes</a><br /><br />

    You are ready to start writing tests for your code, but your code isn't ready to be tested. It's a mess and you know it, but you have got work to do and only so much time to go back and rewrite code that is already working...sort of. You want your evenings and weekends back. What if I told you there are a few easy-to-follow rules for creating testable PHP code? Rules that you can incorporate into your workflow RIGHT NOW. Let legendary (in his own mind) grumpy programmer Chris Hartjes show you tips and tricks he has learned to write PHP code that is easy to test and maintain.<br /><br />

</div>
<div id="decoupled-library-packages-for-php-5-4">
    <hr />

    <h2>Decoupled Library Packages for PHP 5.4</h2>

    <a href="/speakers#paul-m-jones" title="Speaker: Paul M Jones">Paul M Jones</a><br /><br />

    This talk discusses how to develop decoupled library packages using dependency injection. It gives an overview of the Aura project, a collection of independent (non-framework) library packages providing commonly-needed tools for developers. The talk includes a discussion of the benefits of dependency injection when removing dependencies.<br /><br />

</div>
<div id="browser-eyeballing-not-equal-to-javascript-testing">
    <hr />

    <h2>Browser Eyeballing != JavaScript Testing</h2>

    <a href="/speakers#jordan-kasper" title="Speaker: Jordan Kasper">Jordan Kasper</a><br /><br />

    Stop eyeballing your UI in a browser to test your JavaScript code - that doesn't count. While many developers have embraced testing in their server side code using TDD, fewer test their front end JavaScript code in the same way (or in any way), and even fewer of those use any kind of automation. This talk will guide attendees on how to write testable JavaScript code, how to write tests for that code, and some solutions for automating the process. Participants will come out of this talk ready to implement and automate better tests for their JavaScript code.<br /><br />

</div>
<div id="profiling-php-with-xhprof">
    <hr />

    <h2>Profiling PHP with XHProf</h2>

    <a href="/speakers#jonathan-klein" title="Speaker: Jonathan Klein">Jonathan Klein</a><br /><br />

    Measuring and improving the performance of your PHP application is critical to giving your customers a great experience. To get a realistic view of where the time spent in PHP is actually going, you need to profile your code. XHProf is an open source, low overhead, robust profiling tool for PHP. This talk will explain how to install it, leverage its most important features, and solve the kinds of problems that XHProf can help identify. XHProf has a browser based UI, which makes it extremely easy to use and to share code profiles with coworkers. I will be demoing various traces, talking about PHP micro-optimizations, and showing you how to quickly drill down and find the slowest parts of your site. By using XHProf to identify the big wins, you can spend less time optimizing and more time building new features. You will come away from this talk with a working knowledge of XHProf, and the ability to get it up and running in your environment in minutes.<br /><br />

</div>
<div id="git-educated-about-git">
    <hr />

    <h2>Git educated about git (with song)</h2>

    <a href="/speakers#jeremy-lindblom" title="Speaker: Jeremy Lindblom">Jeremy Lindblom</a><br /><br />

    Git is a free, distributed version control system that is fast, easy to learn, and has great features. It has also taken the open source world by storm, especially with services like GitHub. Learn 20 essential Git commands, study some common conventions and workflows, and be prepared for a musical performance to assist you in your Git mastery.<br /><br />

</div>
<div id="algorithm-review-sorting">
    <hr />

    <h2>Algorithm, Review, Sorting</h2>

    <a href="/speakers#rowan-merewood" title="Speaker: Rowan Merewood">Rowan Merewood</a><br /><br />

    High-level languages and platforms abstract away basic computer science problems so we can code quicker and not re-invent the wheel. That said, algorithms are too much fun to just leave as a black box. We'll learn how to analyse and compare sorting algorithms with live demos and visualisations. With an algorithm from the 1800s, it could even be a history lesson too.<br /><br />

</div>
<div id="building-better-developers">
    <hr />

    <h2>Building better developers</h2>

    <a href="/speakers#rowan-merewood" title="Speaker: Rowan Merewood">Rowan Merewood</a><br /><br />

    Thankfully, "rockstar" and "ninja" are now dirty words when it comes to describing developers. It's not about being a superhero, it's about simple, achievable steps to change the way you work. This talk collects together some personal favourite hints and hacks for improving how you approach software engineering. We'll dive into the Quake 3 source code, the Linux kernel mailing list and discover the One True Editor along the way.<br /><br />

</div>
<div id="doctrine-object-persistence-and-you">
    <hr />

    <h2>Doctrine, Object Persistence, and You</h2>

    <a href="/speakers#jeremy-mikola" title="Speaker: Jeremy Mikola">Jeremy Mikola</a><br /><br />

    Doctrine has come a long way from its humble beginnings as an active record ORM for SQL databases. After an overview of relevant design patterns, we'll discuss the practical benefits (and caveats) of managed object persistence in Doctrine ORM and the newer Non-SQL ODMs, look at data modeling via its widely used annotation library, and explore APIs for persistence and query services. Finally, we'll survey other projects in the family, such as lower-level database and cache abstractions.<br /><br />

</div>
<div id="using-github-for-more-than-code">
    <hr />

    <h2>Using Github for more than code</h2>

    <a href="/speakers#elizabeth-naramore" title="Speaker: Elizabeth Naramore">Elizabeth Naramore</a><br /><br />

    It's no secret that at GitHub, we use GitHub to write the code that runs GitHub. But what you may not know is that we also use GitHub to manage GitHub the company. In this talk, I'll show you practical ways that we use our own system in a non-code context. You'll learn how we track projects and to-do lists, discuss and collaborate on corporate policies, communicate news to a highly distributed company, coordinate events, update and collaborate on internal and external documentation, and even onboard new employees. You'll come away from this talk with a whole new perspective on using GitHub.<br /><br />

</div>
<div id="modern-php">
    <hr />

    <h2>Modern PHP</h2>

    <a href="/speakers#ben-ramsey" title="Speaker: Ben Ramsey">Ben Ramsey</a><br /><br />

    With all of the advances that have come in PHP 5.5 (as well as 5.4 and 5.3), modern PHP code no longer looks like the PHP code from years ago. This talk will glimpse into PHP's past to see where we've come from and how we got where we are today, exploring how modern PHP applications are architected now to take full use of the newer features in PHP to produce cleaner, more stable, and easier to maintain codebases.<br /><br />

</div>
<div id="advanced-date-time-handling-with-php">
    <hr />

    <h2>Advanced Date/Time Handling with PHP</h2>

    <a href="/speakers#derick-rethans" title="Speaker: Derick Rethans">Derick Rethans</a><br /><br />

    PHP has powerful date/time handling functionality. It allows you to deal with many issues that arise when you are developing applications. This talk will cover advanced functionality and is not an introduction except for where this is necessary. I will cover dealing with timezones, calculations with DateTime objects and tips and tricks for dealing with storing date/time information.<br /><br />

</div>
<div id="essential-design-patterns-for-php">
    <hr />

    <h2>Essential Design Patterns for PHP</h2>

    <a href="/speakers#brandon-savage" title="Speaker: Brandon Savage">Brandon Savage</a><br /><br />

    Design patterns. They strike fear in the heart of developers. Like wild animals they seem untamable, something best left to the most advanced object oriented developers. But you can master design patterns. I will show you how. Learn about some of the most essential design patterns for PHP developers to know and love, and find out how easy it is to use them in your own application. Youâ€™ll have design patterns mastered in no time.<br /><br />

</div>
<div id="mysql-ha-recovery-and-load-balancing">
    <hr />

    <h2>MySQL HA, Recovery and Load Balancing</h2>

    <a href="/speakers#davey-shafik" title="Speaker: Davey Shafik">Davey Shafik</a><br /><br />

    Using Oracle MySQL Server and Percona XtraDB Cluster we will take a look at several possible replication configurations for MySQL high-availability, disaster recovery and load-balancing. After comparing them for administration ease, scalability of reads and writes, robustness of the system for errors and time for data recovery as well as looking at how they impact your code-layer we will discuss the ins-and-outs of each setup, looking at the pros and cons, and what trade-offs you will need to make depending on your needs.<br /><br />

</div>
<div id="managing-dependencies-with-composer">
    <hr />

    <h2>Managing Dependencies with Composer</h2>

    <a href="/speakers#beau-simensen" title="Speaker: Beau Simensen">Beau Simensen</a><br /><br />

    Traditionally, managing third-party code in PHP projects has not been a trivial task. Fortunately, the PHP community now has Composer, a top-notch dependency manager. Learn what Composer is and how you can put it to work for fun and profit. You will see how to set up a new project, find packages, as well as how to create and distribute your own packages.<br /><br />

</div>
<div id="iterators-in-php">
    <hr />

    <h2>Iterators in PHP</h2>

    <a href="/speakers#jake-smith" title="Speaker: Jake Smith">Jake Smith</a><br /><br />

    PHP iterators have been around since PHP 5, but are heavily under utilized. With all the built-in iterators there is no reason you shouldn't be leveraging it's power and flexibility. In this session you will learn about all the built-in PHP iterators and be guided on how to extend and/or create your own iterators.<br /><br />

</div>
<div id="resting-with-symfony2">
    <hr />

    <h2>phpcr</h2>

    <a href="/speakers#lukas-kahwe-smith" title="Speaker: Lukas Kahwe Smith">Lukas Kahwe Smith</a><br /><br />

    {pending}<br /><br />

</div>
<div id="dont-trust-your-users">
    <hr />

    <h2>Don't trust your users</h2>

    <a href="/speakers#chris-tankersley" title="Speaker: Chris Tankersley">Chris Tankersley</a><br /><br />

    Some of the most common vulnerabilities in web applications are caused by applications not properly inspecting the data that users send in. PHP has an entire suite of tools to help inspected, filter, and sanitize data that comes from the user and other outside parties. Using built-in methods and extra tools you can protect your app from harmful data and users.<br /><br />

</div>
<div id="foundations-of-php">
    <hr />

    <h2>Foundations of PHP</h2>

    <a href="/speakers#beth-tucker-long" title="Speaker: Beth Tucker Long">Beth Tucker Long</a><br /><br />

    A building works better with a solid foundation beneath it. The same is true for PHP. Whether you are new to programming or are just looking for a refresher, this session will take you through the basics. Beth Tucker Long will cover strings and arrays, conditions and loops, sessions and cookies, form validation and security, and writing your own functions. Best of all, Beth won't just talk about these concepts, she'll go through actual code, so you can see them in action. Bring your laptop, follow along, and you'll have a working application when you leave. Questions are welcomed!<br /><br />

</div>
<div id="ua-testing-with-selenium-and-phpunit">
    <hr />

    <h2>UA Testing with Selenium and PHPUnit</h2>

    <a href="/speakers#michelangelo-van-dam" title="Speaker: Michelangelo Van Dam">Michelangelo Van Dam</a><br /><br />

    Nothing is as frustrated as deploying a new release of your web application to find out functionality you had doesn't work anymore. Of course you have all your unit tests in place and you run them through your CI environment, but nothing prepared you to a failing javascript error or a link that doesn't work anymore. Welcome to User Acceptance testing or UAT. Before you start putting real people in front of your application, create macros and export them as PHPUnit test classes. Then run them in an automated way just like your unit tests and hook them into your CI. In this talk I will show you how easy it is to create Selenium macros that can be converted into PHPUnit scripts and run automatically on different virtual machines (VMs) so you can test all different browsers on a diversity of operating systems.<br /><br />

</div>
<div id="scaling-applications-with-rabbitmq">
    <hr />

    <h2>Scaling Applications with RabbitMQ</h2>

    <a href="/speakers#alvaro-videla" title="Speaker: Alvaro Videla">Alvaro Videla</a><br /><br />

    Do you need to process thousands of images in the background for your web app? Do you need to share data across multiple applications, probably written in different languages and sitting at different servers? Your real time data feed is becoming slow because you are polling the database constantly for new data updates? Do you need to scale information processing during peek times? What about deploying new features with zero downtime? If any of these problems sound familiar then you probably need to use messaging in your application. In this talk I will introduce RabbitMQ, a messaging and queue server that can help us tackle those problems. We will learn how to implement messaging into our applications, use Pub/Sub, RPC and give a new meaning to the term 'decoupling'.<br /><br />

</div>
<div id="symfony-2-intro">
    <hr />

    <h2>Get Started, Move Fast and Break Things with Symfony2</h2>

    <a href="/speakers#ryan-weaver" title="Speaker: Ryan Weaver">Ryan Weaver</a><br /><br />

    Grab some coffee and let's get your project moving on Symfony2! Since its 2.0 release in 2011, a lot of fantastic tools and best-practices have been built up around Symfony. In this talk, we'll start a real project and learn about some of these tools that can make us dangerous as quickly as possible! Symfony2 lets you write beautiful, maintainable code, and I'll give you 5 tips to do just that while staying aggressive with getting features out the door. RAD!<br /><br />

</div>
<div id="hacking-wordpress-a-crash-course-in-writing-plugins-and-widgets">
    <hr />

    <h2>Hacking Wordpress, a Crash Course in Writing Plugins and Widgets</h2>

    <a href="/speakers#eli-white" title="Speaker: Eli White">Eli White</a><br /><br />

    I spent most of my career writing large custom in-house solutions. To me, WordPress was the software I used to run my blog, nothing more. Suddenly I found myself doing WP consulting as well as inheriting the php[architect] codebase which is completely built on top of it!  I was then amazed as I dove in, at just how easy it is in WP to build any custom functionality/pages that you need via a simple API. Come learn in this session just how easy it is to build custom functionality into WP and use it as an application development framework.<br /><br />

</div>
<hr />
</div>
</div>